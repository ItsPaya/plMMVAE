epoch = self.current_epoch
        self.test_samples = self.get_test_samples()
        # plots = generate_plots(self, epoch)
        # for k, p_key in enumerate(plots.keys()):
        #     ps = plots[p_key]
        #     for l, name in enumerate(ps.keys()):
        #         fig = ps[name]
        #         self.logger.experiment.add_image(p_key + '_' + name,
        #                        fig, epoch, dataformats='HWC')

        if (epoch + 1) % self.flags.eval_freq == 0 or (epoch + 1) == self.flags.end_epoch:
            if self.flags.eval_lr:
                clf_lr = train_clf_lr_all_subsets(self, self.trainer.train_dataloader,
                                                  self.trainer.train_dataloader.dataset)
                lr_eval = test_clf_lr_all_subsets(epoch, clf_lr, self, self.trainer.datamodule)
                for s, l_key in enumerate(sorted(lr_eval.keys())):
                    self.log('Latent Representation/%s' % l_key,
                             lr_eval[l_key], on_epoch=True)

            if self.flags.use_clf:
                gen_eval = test_generation(epoch, self, self.trainer.datamodule)
                for j, l_key in enumerate(sorted(gen_eval['cond'].keys())):
                    for k, s_key in enumerate(gen_eval['cond'][l_key].keys()):
                        self.log('Generation/%s/%s' %
                                 (l_key, s_key),
                                 gen_eval['cond'][l_key][s_key],
                                 on_epoch=True)
                self.log('Generation/Random', gen_eval['random'], on_epoch=True)

            if self.flags.calc_nll:
                lhoods = estimate_likelihoods(self, self.trainer.datamodule)
                for k, key in enumerate(sorted(lhoods.keys())):
                    self.log('Likelihoods/%s' % key,
                             lhoods[key], on_epoch=True)

            if self.flags.calc_prd and ((epoch + 1) % self.flags.eval_freq_fid == 0):
                prd_scores = calc_prd_score(self)
                self.log('PRD', prd_scores, on_epoch=True)